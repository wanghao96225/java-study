server:
  port: 8080
spring:
  ### 处理连接池冲突 #####
  main:
    allow-bean-definition-overriding: true
  shardingsphere:
    # 是否启用 Sharding
    enabled: true
    datasource:
      names: testdb
      testdb:
        url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf8&useSSL=false&allowMultiQueries=true
        username: 用户名
        password: 密码
        type: com.alibaba.druid.pool.DruidDataSource
        druid:
          initialSize: 5
          # 最小连接池数量
          minIdle: 10
          # 最大连接池数量
          maxActive: 20
          # 配置获取连接等待超时的时间
          maxWait: 60000
          # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
          timeBetweenEvictionRunsMillis: 60000
          # 配置一个连接在池中最小生存的时间，单位是毫秒
          minEvictableIdleTimeMillis: 300000
          # 配置一个连接在池中最大生存的时间，单位是毫秒
          maxEvictableIdleTimeMillis: 900000
          # 配置检测连接是否有效
          validationQuery: SELECT 1 FROM DUAL
          #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
          testWhileIdle: true
          #配置从连接池获取连接时，是否检查连接有效性，true每次都检查；false不检查。做了这个配置会降低性能。
          testOnBorrow: false
          #配置向连接池归还连接时，是否检查连接有效性，true每次都检查；false不检查。做了这个配置会降低性能。
          testOnReturn: false
          #打开PsCache，并且指定每个连接上PSCache的大小
          poolPreparedStatements: true
          maxPoolPreparedStatementPerConnectionSize: 20
          #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
          filters: stat,wall
          #合并多个DruidDatasource的监控数据
          useGlobalDataSourceStat: true
          #通过connectProperties属性来打开mergesql功能罗慢sQL记录
          connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500;
    rules:
      sharding:
        # 表策略配置
        tables:
          # test_history 是逻辑表
          test_history:
            # 配置数据节点，这里是按月分表
            # 示例1：时间范围设置在202201 ~ 210012
            # actualDataNodes: testdb.test_history->{2022..2100}0$->{1..9},testdb.test_history_$_$->{2022..2100}1$->{0..2}
            # 示例2：时间范围设置在202201 ~ 202203
            actualDataNodes: testdb.test_history
            tableStrategy:
              # 使用标准分片策略
              standard:
                # 配置分片字段
                shardingColumn: start_time
                # 分片算法名称，不支持大写字母和下划线，否则启动就会报错
                shardingAlgorithmName: time-sharding-algorithm
          test_realtime:
            # 配置数据节点，这里是按月分表
            # 示例1：时间范围设置在202201 ~ 210012
            # actualDataNodes: testdb.test_history->{2022..2100}0$->{1..9},testdb.test_history_$_$->{2022..2100}1$->{0..2}
            # 示例2：时间范围设置在202201 ~ 202203
            actualDataNodes: testdb.test_realtime
            tableStrategy:
              # 使用标准分片策略
              standard:
                # 配置分片字段
                shardingColumn: start_time
                # 分片算法名称，不支持大写字母和下划线，否则启动就会报错
                shardingAlgorithmName: time-sharding-algorithm
        # 分片算法配置
        shardingAlgorithms:
          # 分片算法名称，不支持大写字母和下划线，否则启动就会报错
          time-sharding-algorithm:
            # 类型：自定义策略
            type: CLASS_BASED
            props:
              # 分片策略
              strategy: standard
              # 分片算法类
              algorithmClassName: com.wh.sharding.config.TimeShardingAlgorithm